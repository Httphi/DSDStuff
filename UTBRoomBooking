-- ============================================
-- Room Booking DB: DB create + schema + data + queries
-- (MPH removed; CONC belongs to Academic Building)
-- ============================================

-- 0) Create & select database (prevents Error 1046)
CREATE DATABASE IF NOT EXISTS RoomBookingDB
  CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE RoomBookingDB;

-- 1) Reset (drop in FK order)
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS Notification;
DROP TABLE IF EXISTS Booking;
DROP TABLE IF EXISTS BookingSeries;
DROP TABLE IF EXISTS RoomFacility;
DROP TABLE IF EXISTS Facility;
DROP TABLE IF EXISTS Room;
DROP TABLE IF EXISTS Building;
DROP TABLE IF EXISTS `User`;
SET FOREIGN_KEY_CHECKS = 1;

-- 2) Tables (match your ERD)

CREATE TABLE Building (
  BuildingID   INT PRIMARY KEY,
  BuildingName VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE Room (
  RoomID     INT PRIMARY KEY,
  RoomCode   VARCHAR(50) UNIQUE NOT NULL,
  BuildingID INT NOT NULL,
  Floor      VARCHAR(10),
  Capacity   INT NOT NULL,
  FOREIGN KEY (BuildingID) REFERENCES Building(BuildingID)
);

CREATE TABLE Facility (
  FacilityID   INT PRIMARY KEY,
  FacilityName VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE RoomFacility (
  RoomID     INT NOT NULL,
  FacilityID INT NOT NULL,
  Quantity   INT NOT NULL,
  PRIMARY KEY (RoomID, FacilityID),
  FOREIGN KEY (RoomID)     REFERENCES Room(RoomID),
  FOREIGN KEY (FacilityID) REFERENCES Facility(FacilityID)
);

-- NOTE: backticks because USER is reserved in MySQL
CREATE TABLE `User` (
  UserID   INT PRIMARY KEY,
  FullName VARCHAR(100) NOT NULL,
  Email    VARCHAR(100) UNIQUE NOT NULL,
  Role     ENUM('Student','Lecturer','Staff') NOT NULL
);

CREATE TABLE BookingSeries (
  SeriesID  INT PRIMARY KEY,
  CreatedBy INT NOT NULL,
  RRuleText VARCHAR(255),
  FOREIGN KEY (CreatedBy) REFERENCES `User`(UserID)
);

CREATE TABLE Booking (
  BookingID      INT PRIMARY KEY,
  RoomID         INT NOT NULL,
  UserID         INT NOT NULL,
  SeriesID       INT NULL,
  Purpose        VARCHAR(255),
  StartDT        DATETIME NOT NULL,
  EndDT          DATETIME NOT NULL,
  Status         ENUM('Pending','Approved','Rejected','Cancelled') NOT NULL,
  DecidedBy      INT NULL,
  DecidedAt      DATETIME NULL,
  DecisionReason VARCHAR(255) NULL,
  CreatedAt      DATETIME NOT NULL,
  FOREIGN KEY (RoomID)   REFERENCES Room(RoomID),
  FOREIGN KEY (UserID)   REFERENCES `User`(UserID),
  FOREIGN KEY (SeriesID) REFERENCES BookingSeries(SeriesID),
  FOREIGN KEY (DecidedBy) REFERENCES `User`(UserID),
  CHECK (StartDT < EndDT)
);

CREATE TABLE Notification (
  NotificationID INT PRIMARY KEY,
  BookingID      INT NOT NULL,
  Type           ENUM('Confirm','Reject','Reminder') NOT NULL,
  SentAt         DATETIME NOT NULL,
  FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);

-- Helpful indexes
CREATE INDEX idx_room_building  ON Room(BuildingID, Capacity);
CREATE INDEX idx_booking_room   ON Booking(RoomID, StartDT, EndDT, Status);
CREATE INDEX idx_booking_user   ON Booking(UserID, StartDT);

-- 3) Sample data

-- Buildings (MPH removed)
INSERT INTO Building (BuildingID, BuildingName) VALUES
(1,'FEB'),
(2,'SASM'),
(3,'Academic Building');

-- Rooms (CONC now under Academic Building)
INSERT INTO Room (RoomID, RoomCode, BuildingID, Floor, Capacity) VALUES
(1,'GF.48',1,'G',55),
(2,'LT1',  2,'1',120),
(3,'LT2',  2,'1',120),
(4,'LT3',  2,'1',120),
(5,'LT4',  3,'2',40),
(6,'CONC', 3,'G',60);

-- Facilities
INSERT INTO Facility (FacilityID, FacilityName) VALUES
(1,'Projector'),
(2,'Whiteboard'),
(3,'Cables');

-- RoomFacility
INSERT INTO RoomFacility (RoomID, FacilityID, Quantity) VALUES
(1,1,1),
(1,2,1),
(2,1,2),
(2,2,1),
(3,1,2),
(3,2,1),
(4,1,2),
(5,1,1),
(5,2,1),
(6,3,5);

-- Users (your names preserved)
INSERT INTO `User` (UserID, FullName, Email, Role) VALUES
(1,'Nafiz Student',      'Nafiz@student.utb.edu.bn','Student'),
(2,'Dr Zainah Lecturer', 'DrZainah@utb.edu.bn','Lecturer'),
(3,'Faizah Staff',       'Faizah@utb.edu.bn','Staff'),
(4,'Hanif Student',      'Hanif@student.utb.edu.bn','Student'),
(5,'Ezekiel Lecturer',   'Ezekiel@utb.edu.bn','Lecturer');

-- BookingSeries (recurring)
INSERT INTO BookingSeries (SeriesID, CreatedBy, RRuleText) VALUES
(1,2,'Weekly Tue 10–12'),
(2,5,'Weekly Thu 14–16');

-- Bookings (mix: Approved, Rejected, Cancelled, Pending)
INSERT INTO Booking
(BookingID, RoomID, UserID, SeriesID, Purpose, StartDT, EndDT, Status, DecidedBy, DecidedAt, DecisionReason, CreatedAt) VALUES
(1,1,1,NULL,'Study Group','2025-01-10 10:00:00','2025-01-10 12:00:00','Approved', 3,'2025-01-09 15:00:00',NULL,'2025-01-08 12:00:00'),
(2,2,2,1,  'Lecture',    '2025-02-05 10:00:00','2025-02-05 12:00:00','Approved', 3,'2025-02-01 09:00:00',NULL,'2025-01-30 09:00:00'),
(3,5,4,NULL,'Group Project','2025-03-12 14:00:00','2025-03-12 16:00:00','Rejected', 3,'2025-03-10 14:00:00','Room clash','2025-03-09 12:00:00'),
(4,6,1,NULL,'Event Prep','2025-08-15 09:00:00','2025-08-15 11:00:00','Cancelled',3,'2025-08-14 10:00:00','User cancelled','2025-08-10 12:00:00'),
(5,2,5,2,  'Lecture',    '2025-09-04 14:00:00','2025-09-04 16:00:00','Pending',  NULL,NULL,NULL,'2025-08-30 11:00:00');

-- Notifications
INSERT INTO Notification (NotificationID, BookingID, Type, SentAt) VALUES
(1,1,'Confirm', '2025-01-09 16:00:00'),
(2,3,'Reject',  '2025-03-10 14:30:00'),
(3,4,'Reminder','2025-08-14 09:00:00'),
(4,5,'Confirm', '2025-09-01 09:00:00');

-- ============================================
-- EXTRA BOOKINGS to enrich Q2–Q5 results
-- ============================================

-- More bookings during the semester (Jan–May 2025) for Q2/Q3
INSERT INTO Booking
(BookingID, RoomID, UserID, SeriesID, Purpose, StartDT, EndDT, Status, DecidedBy, DecidedAt, DecisionReason, CreatedAt) VALUES
(6,  3, 2, 1,  'Lecture',      '2025-02-12 10:00:00','2025-02-12 12:00:00','Approved', 3,'2025-02-10 09:00:00',NULL,'2025-02-08 11:00:00'),
(7,  2, 5, 2,  'Lecture',      '2025-03-05 14:00:00','2025-03-05 16:00:00','Approved', 3,'2025-03-01 09:00:00',NULL,'2025-02-27 09:30:00'),
(8,  1, 4, NULL,'Study Group',  '2025-04-18 09:00:00','2025-04-18 11:00:00','Rejected', 3,'2025-04-16 15:00:00','Capacity exceeded','2025-04-15 10:00:00'),
(9,  3, 1, NULL,'Project Meet', '2025-05-20 09:00:00','2025-05-20 11:00:00','Pending',  NULL,NULL,NULL,'2025-05-15 08:30:00');

-- More cancellations in August 2025 for Q4 (so % looks meaningful)
INSERT INTO Booking
(BookingID, RoomID, UserID, SeriesID, Purpose, StartDT, EndDT, Status, DecidedBy, DecidedAt, DecisionReason, CreatedAt) VALUES
(10, 2, 4, NULL,'Club Briefing', '2025-08-10 09:00:00','2025-08-10 11:00:00','Cancelled', 3,'2025-08-09 16:00:00','Organizer cancelled','2025-08-07 12:00:00'),
(11, 2, 1, NULL,'Revision',      '2025-08-22 10:00:00','2025-08-22 12:00:00','Cancelled', 3,'2025-08-21 10:00:00','User cancelled','2025-08-18 09:00:00'),
(12, 2, 2, NULL,'Lecture Extra', '2025-08-25 10:00:00','2025-08-25 12:00:00','Approved',  3,'2025-08-22 12:00:00',NULL,'2025-08-20 11:00:00'),
(13, 6, 5, NULL,'Event Setup',   '2025-08-29 14:00:00','2025-08-29 16:00:00','Cancelled', 3,'2025-08-28 12:30:00','Venue change','2025-08-26 10:00:00');

-- Extra September (1–15) bookings in Academic Building (CONC) to affect Q5 availability
INSERT INTO Booking
(BookingID, RoomID, UserID, SeriesID, Purpose, StartDT, EndDT, Status, DecidedBy, DecidedAt, DecisionReason, CreatedAt) VALUES
(14, 6, 2, NULL,'Workshop',    '2025-09-05 10:00:00','2025-09-05 12:00:00','Approved', 3,'2025-09-03 09:00:00',NULL,'2025-09-01 10:00:00'),
(15, 6, 1, NULL,'Briefing',    '2025-09-12 15:00:00','2025-09-12 16:00:00','Pending',  NULL,NULL,NULL,'2025-09-08 09:30:00');

-- A couple more outside that building to make lists richer without affecting Q5
INSERT INTO Booking
(BookingID, RoomID, UserID, SeriesID, Purpose, StartDT, EndDT, Status, DecidedBy, DecidedAt, DecisionReason, CreatedAt) VALUES
(16, 3, 5, 2,  'Lecture',     '2025-09-03 14:00:00','2025-09-03 16:00:00','Approved', 3,'2025-08-31 10:00:00',NULL,'2025-08-30 09:00:00'),
(17, 5, 4, NULL,'Discussion',  '2025-09-09 09:00:00','2025-09-09 10:00:00','Rejected', 3,'2025-09-07 13:00:00','Clashes with class','2025-09-06 15:00:00');

-- 4) Lecturer-style queries (run & screenshot)

-- Q1: All rooms with details
SELECT r.RoomID, r.RoomCode, r.Capacity, r.Floor, b.BuildingName
FROM Room r
JOIN Building b ON r.BuildingID = b.BuildingID
ORDER BY b.BuildingName, r.RoomCode;

-- Q2: Rooms already booked this semester (example: Jan–May 2025)
SELECT r.RoomCode, b.BuildingName, bk.BookingID, bk.StartDT, bk.EndDT, u.FullName AS BookedBy, bk.Status
FROM Booking bk
JOIN Room r     ON bk.RoomID = r.RoomID
JOIN Building b ON r.BuildingID = b.BuildingID
JOIN `User` u   ON bk.UserID = u.UserID
WHERE bk.StartDT BETWEEN '2025-01-01' AND '2025-05-31'
ORDER BY r.RoomCode, bk.StartDT;

-- Q3: Rejected bookings this semester + reason
SELECT bk.BookingID, u.FullName, r.RoomCode, bk.StartDT, bk.EndDT, bk.DecisionReason
FROM Booking bk
JOIN `User` u ON bk.UserID = u.UserID
JOIN Room r   ON bk.RoomID = r.RoomID
WHERE bk.Status = 'Rejected'
  AND bk.StartDT BETWEEN '2025-01-01' AND '2025-05-31'
ORDER BY bk.StartDT;

-- Q4: August 2025 cancellations per room + %
SELECT
  r.RoomCode,
  COUNT(*) AS CancelledBookings,
  ROUND(
    COUNT(*) * 100.0 /
    NULLIF((
      SELECT COUNT(*)
      FROM Booking b2
      WHERE b2.RoomID = r.RoomID
        AND YEAR(b2.StartDT) = 2025
        AND MONTH(b2.StartDT) = 8
    ), 0), 2
  ) AS CancelledPercentage
FROM Booking bk
JOIN Room r ON bk.RoomID = r.RoomID
WHERE bk.Status = 'Cancelled'
  AND YEAR(bk.StartDT) = 2025
  AND MONTH(bk.StartDT) = 8
GROUP BY r.RoomID, r.RoomCode
ORDER BY CancelledBookings DESC;

-- Q5: Available rooms not booked in 1–15 Sep 2025, in Academic Building, with min 45 seats
SELECT r.RoomCode, r.Capacity, b.BuildingName
FROM Room r
JOIN Building b ON r.BuildingID = b.BuildingID
WHERE b.BuildingName = 'Academic Building'
  AND r.Capacity >= 45
  AND NOT EXISTS (
      SELECT 1
      FROM Booking bk
      WHERE bk.RoomID = r.RoomID
        AND bk.StartDT < '2025-09-15'
        AND bk.EndDT   > '2025-09-01'
  )
ORDER BY r.RoomCode;

-- (Optional) Diagnostic: what bookings block that window in Academic Building
-- SELECT r.RoomCode, b.BuildingName, bk.StartDT, bk.EndDT, bk.Status
-- FROM Booking bk
-- JOIN Room r     ON bk.RoomID = r.RoomID
-- JOIN Building b ON r.BuildingID = b.BuildingID
-- WHERE b.BuildingName = 'Academic Building'
--   AND bk.StartDT < '2025-09-15'
--   AND bk.EndDT   > '2025-09-01'
-- ORDER BY bk.StartDT;
